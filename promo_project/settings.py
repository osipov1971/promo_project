"""
Django settings for promo_project project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import dotenv
from datetime import timedelta
from pathlib import Path
# Build paths inside the project like this: BASE_DIR / 'subdir'.

dotenv.load_dotenv()
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv('SECRET_KEY', 'secret_key'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if str(os.getenv('DEBUG')) == '1' else False

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    str(os.getenv('ALLOWED_HOST', default='localhost')),
    '194.190.152.210',
    '192.168.66.7',
    '192.168.66.6',
    '192.168.66.5',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'promo_app',
    'rest_framework',
    'corsheaders',
    "drf_yasg",
    'rest_framework_simplejwt',
    'django_filters',
    # 'silk'
]

MIDDLEWARE = [
    # 'silk.middleware.SilkyMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'promo_app.middlewares.LoguruMiddleware',
]

ROOT_URLCONF = 'promo_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'promo_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
POSTGRESQL_DATA = {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': str(os.getenv('NAME_DB', default='am')),
    'USER': str(os.getenv('USER', default='postgres')),
    'PASSWORD': str(os.getenv('PASSWORD', default='postgres')),  # 'sJhe6RTjSIJAWy7y',
    'HOST': str(os.getenv('HOST', default='127.0.0.1')),     # '78.40.219.50',
    'PORT': str(os.getenv('PORT', default='5432')),
}

DATABASES = {
    'default': {
        'ENGINE': POSTGRESQL_DATA.get('ENGINE'),
        'NAME': POSTGRESQL_DATA.get('NAME'),
        'USER': POSTGRESQL_DATA.get('USER'),
        'PASSWORD': POSTGRESQL_DATA.get('PASSWORD'),
        'HOST': POSTGRESQL_DATA.get('HOST'),
        'PORT': POSTGRESQL_DATA.get('PORT'),
    }
}

PSYORG_CONFIG = f"dbname={POSTGRESQL_DATA.get('NAME')} user={POSTGRESQL_DATA.get('USER')} " \
                f"password={POSTGRESQL_DATA.get('PASSWORD')} port={POSTGRESQL_DATA.get('PORT')} " \
                f"host={POSTGRESQL_DATA.get('HOST')}"


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "static/"
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'promo_app.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://localhost:3080",
    f"http://{ALLOWED_HOSTS[2]}:8000",
    f"http://{ALLOWED_HOSTS[2]}:3000",
    "http://192.168.66.7:8000",
    "http://192.168.66.7:3000",
    "http://192.168.66.6:8000",
    "http://192.168.66.6:3000",
    "http://192.168.66.5:8000",
    "http://192.168.66.5:3000",
]

DJANGO_LOGURU_CONFIG = {
    "loguru": {
        "handlers": [
            {
                "sink": BASE_DIR / 'promo_app/logs/info.log',
                "filter": lambda record: record['level'].name == 'INFO',
                "format": '{time} | {level} | {message}',
                "rotation": '100 KB',
                "compression": 'zip',
            },
            {
                "sink": BASE_DIR / 'promo_app/logs/error.log',
                "filter": lambda record: record['level'].name == 'ERROR',
                "format": '{time} | {level} | {message}',
                "rotation": '100 KB',
                "compression": 'zip',
            },
        ]
    },
    "ignore": [
        "silk",
        "swagger",
        "admin",
        "media"
    ]
}
